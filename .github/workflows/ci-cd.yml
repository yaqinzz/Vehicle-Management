name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  backend-tests-build:
    name: Backend - test & build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run backend tests
        working-directory: ./backend
        run: npm run test

      - name: Build backend
        working-directory: ./backend
        run: npm run build

  frontend-build:
    name: Frontend - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  docker-build-and-push:
    name: Build & Push Docker images
    runs-on: ubuntu-latest
    needs: [backend-tests-build, frontend-build]
    steps:
      - uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/vehicle-management-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/vehicle-management-backend:${{ github.sha }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/vehicle-management-frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/vehicle-management-frontend:${{ github.sha }}

  deploy:
    name: Deploy to VPS via SSH
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Prepare deploy files
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          PGADMIN_EMAIL: ${{ secrets.PGADMIN_EMAIL }}
          PGADMIN_PASSWORD: ${{ secrets.PGADMIN_PASSWORD }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOMAIN: ${{ secrets.DOMAIN }}
          LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}
        run: |
          # create deploy env file with secrets (kept only in runner and included in tar)
          mkdir -p deploy
          echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" > deploy/.deploy.env
          echo "PGADMIN_EMAIL=$PGADMIN_EMAIL" >> deploy/.deploy.env
          echo "PGADMIN_PASSWORD=$PGADMIN_PASSWORD" >> deploy/.deploy.env
          echo "DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME" >> deploy/.deploy.env
          echo "DOMAIN=$DOMAIN" >> deploy/.deploy.env
          echo "LETSENCRYPT_EMAIL=$LETSENCRYPT_EMAIL" >> deploy/.deploy.env
          tar -czf deploy_artifacts.tar.gz -C deploy docker-compose.prod.yml nginx.conf backend.env.example .deploy.env || true

      - name: Upload deploy artifacts to VPS
        uses: appleboy/scp-action@v0.1.2
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: 'deploy_artifacts.tar.gz'
          target: '/home/${{ secrets.SSH_USER }}/vehicle-deploy/'

      - name: Ensure Docker is installed on VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            # If docker already installed, show versions and exit
            if command -v docker >/dev/null 2>&1; then
              echo "Docker is already installed"
              docker --version || true
              docker compose version || true
              exit 0
            fi

            # Check for passwordless sudo
            if ! sudo -n true 2>/dev/null; then
              echo "ERROR: user does not have passwordless sudo. Please grant '${{ secrets.SSH_USER }}' passwordless sudo or provide an account with sudo privileges."
              exit 1
            fi

            echo "Installing Docker Engine and Compose plugin..."
            sudo apt-get update
            sudo apt-get install -y ca-certificates curl gnupg lsb-release
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            sudo chmod a+r /etc/apt/keyrings/docker.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            sudo systemctl enable --now docker
            # add user to docker group (may require relogin)
            sudo usermod -aG docker $USER || true
            echo "Docker installation complete"

      - name: Extract and deploy on VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            DEPLOY_DIR=/home/${{ secrets.SSH_USER }}/vehicle-deploy
            mkdir -p "$DEPLOY_DIR"
            cd "$DEPLOY_DIR"
            tar -xzf deploy_artifacts.tar.gz || true
            # source deploy env variables provided by runner
            if [ -f ./deploy/.deploy.env ]; then
              set -o allexport
              source ./deploy/.deploy.env
              set +o allexport
            fi
            # write .env for docker-compose variable substitution
            echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" > .env
            echo "PGADMIN_EMAIL=$PGADMIN_EMAIL" >> .env
            echo "PGADMIN_PASSWORD=$PGADMIN_PASSWORD" >> .env
            echo "DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME" >> .env
            echo "DOMAIN=$DOMAIN" >> .env
            echo "LETSENCRYPT_EMAIL=$LETSENCRYPT_EMAIL" >> .env
            # pull images
            docker compose pull || true
            # replace domain placeholder in nginx.conf using DOMAIN from .env
            if [ -n "$DOMAIN" ]; then
              sed -i "s/__DOMAIN__/$DOMAIN/g" nginx.conf || true
            fi
            # recreate services
            docker compose up -d --remove-orphans
            # Obtain TLS certificates with certbot (webroot) if DOMAIN provided
            if [ -n "$DOMAIN" ]; then
              echo "Requesting/renewing certificates for $DOMAIN"
              docker compose run --rm certbot certonly --webroot -w /var/www/certbot -d "$DOMAIN" --email "$LETSENCRYPT_EMAIL" --agree-tos --no-eff-email --non-interactive || true
              # reload nginx to pick up certs
              docker compose exec nginx nginx -s reload || true
            fi
